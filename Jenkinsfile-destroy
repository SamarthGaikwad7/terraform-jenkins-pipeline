pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/SamarthGaikwad7/terraform-jenkins-pipeline.git'
            }
        }

        stage('Backup Terraform State') {
            steps {
                script {
                    if (fileExists('terraform.tfstate')) {
                        sh 'cp terraform.tfstate terraform.tfstate.backup'
                        echo "Terraform state backed up."
                    } else {
                        echo "No Terraform state file found. Skipping backup."
                    }
                }
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                script {
                    sh 'terraform init -reconfigure'
                    sh 'terraform validate'
                }
            }
        }

        stage('Check Terraform State') {
            steps {
                script {
                    def stateOutput = sh(script: 'terraform state list', returnStdout: true).trim()
                    if (stateOutput == '') {
                        echo "No resources found in Terraform state."
                        currentBuild.result = 'ABORTED'
                        error("No resources to destroy. Exiting pipeline.")
                    } else {
                        echo "Resources detected: ${stateOutput}"
                    }
                }
            }
        }

        stage('Terraform Refresh') {
            steps {
                script {
                    sh 'terraform refresh'
                }
            }
        }

        stage('Terraform Plan for Destruction') {
            steps {
                script {
                    def planOutput = sh(script: 'terraform plan -destroy -out=tfplan', returnStdout: true).trim()
                    if (planOutput.contains("No changes. No objects need to be destroyed.")) {
                        echo "Terraform detected no changes to destroy. Exiting pipeline."
                        currentBuild.result = 'ABORTED'
                        error("No resources to destroy. Exiting.")
                    } else {
                        echo "Terraform Plan Output:\n${planOutput}"
                    }
                }
            }
        }

        stage('Destroy Confirmation') {
            steps {
                input message: 'Are you sure you want to destroy the selected resources?', ok: 'Yes, Destroy'
            }
        }

        stage('Destroy Resources') {
            steps {
                script {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Terraform resources destroyed successfully!'
        }
        failure {
            echo 'Terraform destroy failed. Please check logs.'
        }
    }
}
