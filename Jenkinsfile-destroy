pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/SamarthGaikwad7/terraform-jenkins-pipeline.git'
            }
        }

        stage('Backup Terraform State') {
            steps {
                script {
                    if (fileExists('terraform.tfstate')) {
                        bat 'copy terraform.tfstate terraform.tfstate.backup'
                        echo "Terraform state backed up."
                    } else {
                        echo "No existing state file found. Proceeding..."
                    }
                }
            }
        }

        stage('Sync Terraform State') {
            steps {
                script {
                    bat 'terraform init -reconfigure'
                    def stateExists = bat(returnStatus: true, script: 'terraform state pull > terraform.tfstate') == 0
                    if (stateExists) {
                        echo "Terraform state synchronized successfully."
                    } else {
                        echo "Warning: No state file found. Infrastructure may not exist!"
                    }
                }
            }
        }

        stage('Query AWS Resources by Name') {
            steps {
                script {
                    // Example: Query EC2 instance by name
                    def instanceName = "My EC2 Instance XYZ 2025" // Replace with the name of your EC2 instance
                    def instanceId = bat(returnStdout: true, script: """
                        aws ec2 describe-instances \
                            --filters "Name=tag:Name,Values=${instanceName}" \
                            --query "Reservations[].Instances[].InstanceId" \
                            --output text
                    """).trim()

                    if (instanceId) {
                        echo "Found EC2 instance with ID: ${instanceId}"
                        env.RESOURCE_ID = instanceId
                    } else {
                        error "No EC2 instance found with name: ${instanceName}"
                    }
                }
            }
        }

        stage('Import Resources') {
            steps {
                script {
                    def resourceId = env.RESOURCE_ID // Use the resource ID from the previous stage
                    def resourceAddress = "aws_instance.public_instance" // Replace with the Terraform resource address

                    // Import the resource into Terraform state
                    def importStatus = bat(returnStatus: true, script: "terraform import ${resourceAddress} ${resourceId}")
                    if (importStatus == 0) {
                        echo "Resource imported successfully."
                    } else {
                        error "Failed to import resource. Check logs."
                    }
                }
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                script {
                    bat 'terraform validate'
                }
            }
        }

        stage('Terraform Plan for Destruction') {
            steps {
                script {
                    def planStatus = bat(returnStatus: true, script: 'terraform plan -destroy -out=tfplan')
                    if (planStatus != 0) {
                        error "Terraform destroy plan failed. Check configuration."
                    }
                }
            }
        }

        stage('Destroy Confirmation') {
            steps {
                script {
                    input message: "Proceed with destruction?", ok: "Yes, Destroy"
                }
            }
        }

        stage('Destroy Resources') {
            steps {
                script {
                    def destroyStatus = bat(returnStatus: true, script: 'terraform destroy -auto-approve')
                    if (destroyStatus != 0) {
                        error "Terraform destroy failed! Check logs."
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Terraform destroy failed. Please check logs."
        }
    }
}
