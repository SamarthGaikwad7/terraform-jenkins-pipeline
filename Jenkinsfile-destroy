pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/SamarthGaikwad7/terraform-jenkins-pipeline.git'
            }
        }

        stage('Backup Terraform State') {
            steps {
                script {
                    if (fileExists('terraform.tfstate')) {
                        bat 'copy terraform.tfstate terraform.tfstate.backup'
                        echo "Terraform state backed up."
                    } else {
                        echo "No Terraform state file found. Skipping backup."
                    }
                }
            }
        }

        stage('Sync Terraform State') {
            steps {
                script {
                    bat 'terraform state pull > terraform.tfstate'
                    echo "Terraform state synchronized with AWS."
                }
            }
        }

        stage('Check & Import Missing Resources') {
            steps {
                script {
                    def stateOutput = bat(script: 'terraform state list', returnStdout: true).trim()
                    if (stateOutput == '') {
                        echo "No resources found in Terraform state. Importing missing resources..."
                        bat '''
                            terraform import aws_instance.my_instance i-0c5089ac31cef0619 || echo "Instance import failed or not needed"
                            terraform import aws_s3_bucket.my_bucket my-bucket-name || echo "S3 bucket import failed or not needed"
                            terraform import aws_vpc.my_vpc vpc-xxxxxxxx || echo "VPC import failed or not needed"
                        '''
                    } else {
                        echo "Terraform state contains resources. Proceeding with destroy..."
                    }
                }
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                bat 'terraform init -reconfigure'
                bat 'terraform validate'
            }
        }

        stage('Terraform Plan for Destruction') {
            steps {
                bat 'terraform plan -destroy -out=tfplan'
            }
        }

        stage('Destroy Confirmation') {
            steps {
                input message: 'Are you sure you want to destroy the selected resources?', ok: 'Yes, Destroy'
            }
        }

        stage('Destroy Resources') {
            steps {
                script {
                    bat 'terraform destroy -auto-approve'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Terraform resources destroyed successfully!'
        }
        failure {
            echo 'Terraform destroy failed. Please check logs.'
        }
    }
}
