pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/SamarthGaikwad7/terraform-jenkins-pipeline.git'
            }
        }

        stage('Backup Terraform State') {
            steps {
                script {
                    if (fileExists('terraform.tfstate')) {
                        bat 'copy terraform.tfstate terraform.tfstate.backup'
                        echo "Terraform state backed up."
                    } else {
                        echo "No Terraform state file found. Skipping backup."
                    }
                }
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                script {
                    bat 'terraform init -reconfigure'
                    bat 'terraform validate'
                }
            }
        }

        stage('Check Terraform State') {
    steps {
        script {
            def stateOutput = bat(script: 'terraform state list', returnStdout: true).trim()
            if (stateOutput == '') {
                echo "No resources found in Terraform state. Possibly already deleted or missing state file."
                currentBuild.result = 'ABORTED'
                error("No resources to destroy. Exiting pipeline.")
            } else {
                echo "Resources detected:\n${stateOutput}"
            }
        }
    }
}
        stage('Terraform Refresh (Check for Drifts)') {
            steps {
                script {
                    bat 'terraform plan -refresh-only -out=tfplan'
                }
            }
        }

        stage('Terraform Plan for Destruction') {
            steps {
                script {
                    def planOutput = bat(script: 'terraform plan -destroy -out=tfplan > plan.log', returnStdout: true).trim()
                    if (planOutput.contains("No changes")) {
                        echo "No resources to destroy. Exiting pipeline."
                        error("No resources to destroy. Exiting.")
                    } else {
                        echo "Terraform Plan Output:\n${planOutput}"
                    }
                }
            }
        }

        stage('Destroy Confirmation') {
            steps {
                input message: 'Are you sure you want to destroy the selected resources?', ok: 'Yes, Destroy'
            }
        }

        stage('Destroy Resources') {
            steps {
                script {
                    bat 'terraform destroy -auto-approve'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Terraform resources destroyed successfully!'
        }
        failure {
            echo 'Terraform destroy failed. Please check logs.'
        }
    }
}
