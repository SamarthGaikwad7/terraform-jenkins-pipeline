pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    dir("ci-cd-terraform-jenkins-pipeline") {
                        git branch: 'main', url: 'https://github.com/SamarthGaikwad7/terraform-jenkins-pipeline.git'
                    }
                }
            }
        }

        stage('Backup Terraform State') {
            steps {
                script {
                    def stateFileExists = fileExists('ci-cd-terraform-jenkins-pipeline/terraform.tfstate')
                    if (stateFileExists) {
                        echo "Backing up Terraform state..."
                        bat '''
                            cd /d ci-cd-terraform-jenkins-pipeline
                            copy terraform.tfstate terraform.tfstate.backup
                        '''
                    } else {
                        echo "No Terraform state file found. Skipping backup."
                    }
                }
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                bat '''
                    cd /d ci-cd-terraform-jenkins-pipeline
                    terraform init -reconfigure
                    terraform validate
                '''
            }
        }

        stage('Check Terraform State') {
            steps {
                script {
                    def output = bat(script: '''
                        cd /d ci-cd-terraform-jenkins-pipeline
                        terraform state list
                    ''', returnStdout: true).trim()
                    
                    if (output == "") {
                        error "No resources found in Terraform state. Nothing to destroy."
                    } else {
                        echo "Resources found: \n${output}"
                    }
                }
            }
        }

        stage('Terraform Refresh') {
            steps {
                bat '''
                    cd /d ci-cd-terraform-jenkins-pipeline
                    terraform refresh
                '''
            }
        }

        stage('Terraform Plan for Destruction') {
            steps {
                script {
                    def planOutput = bat(script: '''
                        cd /d ci-cd-terraform-jenkins-pipeline
                        terraform plan -destroy -out=tfplan
                    ''', returnStdout: true).trim()
                    
                    echo "Terraform Plan Output:\n${planOutput}"
                    
                    if (planOutput.contains("No changes.")) {
                        error "Terraform detected no changes to destroy. Exiting pipeline."
                    }
                }
            }
        }

        stage('Destroy Confirmation') {
            steps {
                input message: "Are you sure you want to destroy the selected resources?", ok: "Yes, Destroy"
            }
        }

        stage('Destroy Resources') {
            steps {
                bat '''
                    cd /d ci-cd-terraform-jenkins-pipeline
                    terraform destroy -auto-approve
                '''
            }
        }
    }

    post {
        success {
            echo "Terraform resources destroyed successfully."
        }
        failure {
            echo "Terraform destruction failed! Check logs for errors."
        }
    }
}
